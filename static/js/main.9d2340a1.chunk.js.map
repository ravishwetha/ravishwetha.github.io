{"version":3,"sources":["views/Menu.jsx","components/Model.jsx","App.js","serviceWorker.js","index.js"],"names":["Menu","props","react_default","a","createElement","main_default","data","onClickItem","Model","title","id","frameBorder","width","height","allowFullScreen","src","url","defaultUrl","treeData","key","label","nodes","App","_useState","useState","_useState2","Object","slicedToArray","setLabel","_useState3","_useState4","currentUrl","setUrl","className","views_Menu","_ref","objectWithoutProperties","components_Model","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oNAeeA,MAVf,SAAcC,GACZ,OACEC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAUG,KAAML,EAAMK,KAAMC,YAAaN,EAAMM,eCSpCC,MAdf,SAAeP,GACb,OACEC,EAAAC,EAAAC,cAAA,UACEK,MAAM,QACNC,GAAG,iBACHC,YAAY,IACZC,MAAM,MACNC,OAAO,MACPC,iBAAiB,EACjBC,IAAKd,EAAMe,OCJXC,SAAa,sIAEbC,EAAW,CACf,CACEC,IAAK,qBACLC,MAAO,cACPJ,IAAK,sIAEP,CACEG,IAAK,qBACLC,MAAO,eACPC,MAAO,CAAC,CACNF,IAAK,sBACLC,MAAO,kBACPJ,IAAK,qIACLK,MAAO,CACL,CACEF,IAAK,qBACLC,MAAO,iBACPC,MAAO,IAET,CACEF,IAAK,qBACLC,MAAO,wBACPC,MAAO,MAIb,CACEF,IAAK,sBACLC,MAAO,wBACPJ,IAAK,qIACLK,MAAO,CACL,CACEF,IAAK,qBACLC,MAAO,QACPC,MAAO,IAET,CACEF,IAAK,qBACLC,MAAO,kBACPC,MAAO,IAET,CACEF,IAAK,qBACLC,MAAO,gBACPC,MAAO,SA0BFC,MAlBf,WAAe,IAAAC,EACaC,mBAAS,WADtBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNH,EADMK,EAAA,GACCG,EADDH,EAAA,GAAAI,EAEgBL,mBAASP,GAFzBa,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAENE,EAFMD,EAAA,GAEME,EAFNF,EAAA,GAIb,OACE5B,EAAAC,EAAAC,cAAA,OAAK6B,UAAU,OACb/B,EAAAC,EAAAC,cAAC8B,EAAD,CAAM5B,KAAMY,EAAUX,YAAa,SAAA4B,GAA8B,IAA3Bf,EAA2Be,EAA3Bf,MAAOJ,EAAoBmB,EAApBnB,IAAoBU,OAAAU,EAAA,EAAAV,CAAAS,EAAA,iBAC/DP,EAASR,GACLJ,GAAOe,IAAef,GACxBgB,EAAOhB,MAGXd,EAAAC,EAAAC,cAAA,WAAMgB,GACLW,EAAc7B,EAAAC,EAAAC,cAACiC,EAAD,CAAOrB,IAAKe,IAAmB7B,EAAAC,EAAAC,cAAA,kCAA0BgB,KC9D1DkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9d2340a1.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport TreeMenu from 'react-simple-tree-menu'\n\nfunction Menu(props) {\n  return (\n    <TreeMenu data={props.data} onClickItem={props.onClickItem} />\n  );\n}\n\nMenu.propTypes = {\n  data: PropTypes.array.isRequired,\n};\n\nexport default Menu;\n","import React from 'react';\n\nfunction Model(props) {\n  return (\n    <iframe\n      title=\"Model\"\n      id=\"embedded-human\"\n      frameBorder=\"0\"\n      width=\"700\"\n      height=\"550\"\n      allowFullScreen={true}\n      src={props.url}>\n    </iframe>\n  );\n}\n\nexport default Model;\n","import React, { useState } from 'react';\n\nimport Menu from './views/Menu.jsx';\nimport Model from './components/Model.jsx';\n\nimport './App.css';\n\nconst defaultUrl = \"https://human.biodigital.com/widget/?be=2yME&ui-info=false&ui-zoom=true&ui-share=false&ui-help=true&initial.button=true&uaid=3yrIJ\" //male skeleton\n\nconst treeData = [\n  {\n    key: 'first-level-node-1',\n    label: 'Human Basic',\n    url: \"https://human.biodigital.com/widget/?be=2yME&ui-info=false&ui-zoom=true&ui-share=false&ui-help=true&initial.button=true&uaid=3yrIJ\",\n  },\n  {\n    key: 'first-level-node-2',\n    label: 'Organ System',\n    nodes: [{\n      key: 'second-level-node-1',\n      label: 'Skeletal System',\n      url: \"https://human.biodigital.com/widget/?be=2yM0&ui-info=false&ui-zoom=true&ui-share=false&ui-help=true&initial.button=true&uaid=3yqTQ\",\n      nodes: [\n        {\n          key: 'third-level-node-1',\n          label: 'Axial skeleton',\n          nodes: [],\n        },\n        {\n          key: 'third-level-node-2',\n          label: 'Appendicular skeleton',\n          nodes: [],\n        },\n      ],\n    },\n    {\n      key: 'second-level-node-2',\n      label: 'Cardiovascular system',\n      url: \"https://human.biodigital.com/widget/?be=2yMB&ui-info=false&ui-zoom=true&ui-share=false&ui-help=true&initial.button=true&uaid=3yr3D\",\n      nodes: [\n        {\n          key: 'third-level-node-3',\n          label: 'Heart',\n          nodes: [],\n        },\n        {\n          key: 'third-level-node-4',\n          label: 'Arterial System',\n          nodes: [],\n        },\n        {\n          key: 'third-level-node-5',\n          label: 'Venous System',\n          nodes: [],\n        },\n      ],\n    },\n    ]\n  },\n];\n\nfunction App() {\n  const [label, setLabel] = useState('Welcome');\n  const [currentUrl, setUrl] = useState(defaultUrl);\n\n  return (\n    <div className=\"App\">\n      <Menu data={treeData} onClickItem={({ label, url, ...props }) => {\n        setLabel(label)\n        if (url && currentUrl !== url) {\n          setUrl(url)\n        }\n      }} />\n      <div>{label}</div>\n      {currentUrl ? (<Model url={currentUrl} />) : (<div>No Model Loaded for {label}</div>)}\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}